#
# Copyright (c) 2013 Les Hazlewood and contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# INI configuration is very powerful and flexible, while still remaining succinct.
# Please http://shiro.apache.org/configuration.html and
# http://shiro.apache.org/web.html for more.


[main]

# Only while testing
ssl.enabled = false

authc.loginUrl = /login.html

# authc.usernameParam = somethingOtherThanUsername
# authc.passwordParam = somethingOtherThanPassword
# authc.rememberMeParam = somethingOtherThanRememberMe

# Let's use some in-memory caching to reduce the number of runtime lookups against Stormpath.  A real
# application might want to use a more robust caching solution (e.g. ehcache or a distributed cache).  When using such
# caches, be aware of your cache TTL settings: too high a TTL and the cache won't reflect any potential
# changes in Stormpath fast enough.  Too low and the cache could evict too often, reducing performance.
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager

githubRealm = io.gab.github.GithubRealm

# Using the firstSuccessfulStrategy. An auth attempt will flow through user&pass > social until one authentication is successful.
authcStrategy = org.apache.shiro.authc.pam.FirstSuccessfulStrategy

# ---------------------------------------------------------------------------
sessionManager = io.gab.SessionManager
sessionManager.sessionIdCookieEnabled = true
sessionManager.sessionIdUrlRewritingEnabled = false
# configure properties (like session timeout) here if desired

# Use the configured native session manager:
securityManager.sessionManager = $sessionManager
# ---------------------------------------------------------------------------

securityManager.cacheManager = $cacheManager
securityManager.authenticator.authenticationStrategy = $authcStrategy
securityManager.realms = $githubRealm, $iniRealm

[users]
# Defining static user|passwords
admin = secret,admin
shite = shite 


[roles]
admin=*
shite=nu


[urls]
# authc | authz
/rest/private/** = authc, roles[admin]

/login.html = authc
# /oauth-callback = ssuthc

/logout = logout
