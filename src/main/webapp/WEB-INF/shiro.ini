#
# Copyright (c) 2013 Les Hazlewood and contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# INI configuration is very powerful and flexible, while still remaining succinct.
# Please http://shiro.apache.org/configuration.html and
# http://shiro.apache.org/web.html for more.


[main]


# authc.usernameParam = somethingOtherThanUsername
# authc.passwordParam = somethingOtherThanPassword
# authc.rememberMeParam = somethingOtherThanRememberMe

# Let's use some in-memory caching to reduce the number of runtime lookups against Stormpath.  A real
# application might want to use a more robust caching solution (e.g. ehcache or a distributed cache).  When using such
# caches, be aware of your cache TTL settings: too high a TTL and the cache won't reflect any potential
# changes in Stormpath fast enough.  Too low and the cache could evict too often, reducing performance.
cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager

# Only while testing
ssl.enabled = false

authc.loginUrl = /login.html

securityManager.cacheManager = $cacheManager

# Defining a custom realm
# gabAuthenticatingRealm = io.gab.AuthenticatingRealm
# securityManager.realms = $gabAuthenticatingRealm 

# Defining a custom authenticator
# gabAuthenticator = io.gab.Authenticator
# securityManager.authenticator = $gabAuthenticator

##########
# SOCIAL #
##########

requireRoleAdmin = org.pac4j.core.authorization.authorizer.RequireAnyRoleAuthorizer
requireRoleAdmin.elements = ROLE_ADMIN

#customAuthorizer = org.pac4j.demo.shiro.CustomAuthorizer

roleAdminAuthGenerator = org.pac4j.demo.shiro.RoleAdminAuthGenerator

githubClient = org.pac4j.oauth.client.GitHubClient 
githubClient.clientID = 87c846572b2b90a28177
githubClient.secret = 68a1acace949dc6c4d3a270805f035f945a2ab25
githubClient.useNonce = true
githubClient.authorizationGenerator = $roleAdminAuthGenerator

clients = org.pac4j.core.client.Clients
clients.callbackUrl = http://localhost:8081/shiro/callback
clients.clients = $formClient,$indirectBasicAuthClient,$casClient,$vkClient,$saml2Client,$parameterClient,$directBasicAuthClient

config = org.pac4j.core.config.Config
config.clients = $clients
config.authorizers = admin:$requireRoleAdmin #,custom:$customAuthorizer
config.matchers = excludedPath:$excludedPathMatcher

githubSecurityFilter = io.buji.pac4j.filter.SecurityFilter
githubSecurityFilter.config = $config
githubSecurityFilter.clients = $githubClient
githubSecurityFilter.matchers = excludedPath

[users]
# Defining static user|passwords
# admin = secret 


[roles]


[urls]
# authc | authz
/rest/private/** = authc

/login.html = authc
/logout = logout
